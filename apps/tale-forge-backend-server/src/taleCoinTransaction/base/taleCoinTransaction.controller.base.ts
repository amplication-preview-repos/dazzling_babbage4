/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TaleCoinTransactionService } from "../taleCoinTransaction.service";
import { TaleCoinTransactionCreateInput } from "./TaleCoinTransactionCreateInput";
import { TaleCoinTransaction } from "./TaleCoinTransaction";
import { TaleCoinTransactionFindManyArgs } from "./TaleCoinTransactionFindManyArgs";
import { TaleCoinTransactionWhereUniqueInput } from "./TaleCoinTransactionWhereUniqueInput";
import { TaleCoinTransactionUpdateInput } from "./TaleCoinTransactionUpdateInput";

export class TaleCoinTransactionControllerBase {
  constructor(protected readonly service: TaleCoinTransactionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TaleCoinTransaction })
  async createTaleCoinTransaction(
    @common.Body() data: TaleCoinTransactionCreateInput
  ): Promise<TaleCoinTransaction> {
    return await this.service.createTaleCoinTransaction({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TaleCoinTransaction] })
  @ApiNestedQuery(TaleCoinTransactionFindManyArgs)
  async taleCoinTransactions(
    @common.Req() request: Request
  ): Promise<TaleCoinTransaction[]> {
    const args = plainToClass(TaleCoinTransactionFindManyArgs, request.query);
    return this.service.taleCoinTransactions({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TaleCoinTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async taleCoinTransaction(
    @common.Param() params: TaleCoinTransactionWhereUniqueInput
  ): Promise<TaleCoinTransaction | null> {
    const result = await this.service.taleCoinTransaction({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TaleCoinTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTaleCoinTransaction(
    @common.Param() params: TaleCoinTransactionWhereUniqueInput,
    @common.Body() data: TaleCoinTransactionUpdateInput
  ): Promise<TaleCoinTransaction | null> {
    try {
      return await this.service.updateTaleCoinTransaction({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          amount: true,
          createdAt: true,
          date: true,
          id: true,
          typeField: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TaleCoinTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTaleCoinTransaction(
    @common.Param() params: TaleCoinTransactionWhereUniqueInput
  ): Promise<TaleCoinTransaction | null> {
    try {
      return await this.service.deleteTaleCoinTransaction({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          id: true,
          typeField: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
