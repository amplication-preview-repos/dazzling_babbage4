/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TaleCoinTransaction } from "./TaleCoinTransaction";
import { TaleCoinTransactionCountArgs } from "./TaleCoinTransactionCountArgs";
import { TaleCoinTransactionFindManyArgs } from "./TaleCoinTransactionFindManyArgs";
import { TaleCoinTransactionFindUniqueArgs } from "./TaleCoinTransactionFindUniqueArgs";
import { CreateTaleCoinTransactionArgs } from "./CreateTaleCoinTransactionArgs";
import { UpdateTaleCoinTransactionArgs } from "./UpdateTaleCoinTransactionArgs";
import { DeleteTaleCoinTransactionArgs } from "./DeleteTaleCoinTransactionArgs";
import { User } from "../../user/base/User";
import { TaleCoinTransactionService } from "../taleCoinTransaction.service";
@graphql.Resolver(() => TaleCoinTransaction)
export class TaleCoinTransactionResolverBase {
  constructor(protected readonly service: TaleCoinTransactionService) {}

  async _taleCoinTransactionsMeta(
    @graphql.Args() args: TaleCoinTransactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TaleCoinTransaction])
  async taleCoinTransactions(
    @graphql.Args() args: TaleCoinTransactionFindManyArgs
  ): Promise<TaleCoinTransaction[]> {
    return this.service.taleCoinTransactions(args);
  }

  @graphql.Query(() => TaleCoinTransaction, { nullable: true })
  async taleCoinTransaction(
    @graphql.Args() args: TaleCoinTransactionFindUniqueArgs
  ): Promise<TaleCoinTransaction | null> {
    const result = await this.service.taleCoinTransaction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TaleCoinTransaction)
  async createTaleCoinTransaction(
    @graphql.Args() args: CreateTaleCoinTransactionArgs
  ): Promise<TaleCoinTransaction> {
    return await this.service.createTaleCoinTransaction({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TaleCoinTransaction)
  async updateTaleCoinTransaction(
    @graphql.Args() args: UpdateTaleCoinTransactionArgs
  ): Promise<TaleCoinTransaction | null> {
    try {
      return await this.service.updateTaleCoinTransaction({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TaleCoinTransaction)
  async deleteTaleCoinTransaction(
    @graphql.Args() args: DeleteTaleCoinTransactionArgs
  ): Promise<TaleCoinTransaction | null> {
    try {
      return await this.service.deleteTaleCoinTransaction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: TaleCoinTransaction
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
