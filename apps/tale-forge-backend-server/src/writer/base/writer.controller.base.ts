/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WriterService } from "../writer.service";
import { WriterCreateInput } from "./WriterCreateInput";
import { Writer } from "./Writer";
import { WriterFindManyArgs } from "./WriterFindManyArgs";
import { WriterWhereUniqueInput } from "./WriterWhereUniqueInput";
import { WriterUpdateInput } from "./WriterUpdateInput";

export class WriterControllerBase {
  constructor(protected readonly service: WriterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Writer })
  async createWriter(@common.Body() data: WriterCreateInput): Promise<Writer> {
    return await this.service.createWriter({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        bio: true,
        createdAt: true,
        id: true,
        profilePicture: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Writer] })
  @ApiNestedQuery(WriterFindManyArgs)
  async writers(@common.Req() request: Request): Promise<Writer[]> {
    const args = plainToClass(WriterFindManyArgs, request.query);
    return this.service.writers({
      ...args,
      select: {
        bio: true,
        createdAt: true,
        id: true,
        profilePicture: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Writer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async writer(
    @common.Param() params: WriterWhereUniqueInput
  ): Promise<Writer | null> {
    const result = await this.service.writer({
      where: params,
      select: {
        bio: true,
        createdAt: true,
        id: true,
        profilePicture: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Writer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWriter(
    @common.Param() params: WriterWhereUniqueInput,
    @common.Body() data: WriterUpdateInput
  ): Promise<Writer | null> {
    try {
      return await this.service.updateWriter({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          bio: true,
          createdAt: true,
          id: true,
          profilePicture: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Writer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWriter(
    @common.Param() params: WriterWhereUniqueInput
  ): Promise<Writer | null> {
    try {
      return await this.service.deleteWriter({
        where: params,
        select: {
          bio: true,
          createdAt: true,
          id: true,
          profilePicture: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
