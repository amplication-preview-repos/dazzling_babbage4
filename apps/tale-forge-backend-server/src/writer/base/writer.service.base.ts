/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Writer as PrismaWriter,
  User as PrismaUser,
} from "@prisma/client";

export class WriterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WriterCountArgs, "select">): Promise<number> {
    return this.prisma.writer.count(args);
  }

  async writers(args: Prisma.WriterFindManyArgs): Promise<PrismaWriter[]> {
    return this.prisma.writer.findMany(args);
  }
  async writer(
    args: Prisma.WriterFindUniqueArgs
  ): Promise<PrismaWriter | null> {
    return this.prisma.writer.findUnique(args);
  }
  async createWriter(args: Prisma.WriterCreateArgs): Promise<PrismaWriter> {
    return this.prisma.writer.create(args);
  }
  async updateWriter(args: Prisma.WriterUpdateArgs): Promise<PrismaWriter> {
    return this.prisma.writer.update(args);
  }
  async deleteWriter(args: Prisma.WriterDeleteArgs): Promise<PrismaWriter> {
    return this.prisma.writer.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.writer
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
