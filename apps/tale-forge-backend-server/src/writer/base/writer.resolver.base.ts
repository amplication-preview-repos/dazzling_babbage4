/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Writer } from "./Writer";
import { WriterCountArgs } from "./WriterCountArgs";
import { WriterFindManyArgs } from "./WriterFindManyArgs";
import { WriterFindUniqueArgs } from "./WriterFindUniqueArgs";
import { CreateWriterArgs } from "./CreateWriterArgs";
import { UpdateWriterArgs } from "./UpdateWriterArgs";
import { DeleteWriterArgs } from "./DeleteWriterArgs";
import { User } from "../../user/base/User";
import { WriterService } from "../writer.service";
@graphql.Resolver(() => Writer)
export class WriterResolverBase {
  constructor(protected readonly service: WriterService) {}

  async _writersMeta(
    @graphql.Args() args: WriterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Writer])
  async writers(@graphql.Args() args: WriterFindManyArgs): Promise<Writer[]> {
    return this.service.writers(args);
  }

  @graphql.Query(() => Writer, { nullable: true })
  async writer(
    @graphql.Args() args: WriterFindUniqueArgs
  ): Promise<Writer | null> {
    const result = await this.service.writer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Writer)
  async createWriter(@graphql.Args() args: CreateWriterArgs): Promise<Writer> {
    return await this.service.createWriter({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Writer)
  async updateWriter(
    @graphql.Args() args: UpdateWriterArgs
  ): Promise<Writer | null> {
    try {
      return await this.service.updateWriter({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Writer)
  async deleteWriter(
    @graphql.Args() args: DeleteWriterArgs
  ): Promise<Writer | null> {
    try {
      return await this.service.deleteWriter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Writer): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
